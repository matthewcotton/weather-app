{"version":3,"sources":["NewCard.js","SevenDayCards.js","WeatherApiClient.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","paper","padding","spacing","textAlign","color","palette","text","secondary","NewCard","props","classes","day","Date","parseInt","dateTime","nameDay","getDay","month","getMonth","date","getDate","icon","description","detailedDesc","toUpperCase","slice","length","maxTemp","Math","round","minTemp","windSpeed","windDirRot","String","windDir","Grid","item","xs","sm","md","lg","xl","Paper","className","container","direction","alignItems","Typography","variant","gutterBottom","justify","src","alt","style","transform","root","flexGrow","NewWeatherCard","weatherData","map","i","dt","weather","temp","max","min","wind_speed","wind_deg","WeatherApiClient","response","status","Promise","resolve","reject","Error","statusText","url","axios","get","then","this","catch","error","console","alert","getRequest","App","state","loading","fetching","weatherApiClient","setState","getWeather","updateWeather","data","daily","finally","fetchWeather","log","Box","SevenDayCards","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.66e6f532.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport NavigationIcon from \"@material-ui/icons/Navigation\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\nfunction NewCard(props) {\r\n  const classes = useStyles();\r\n  const days = [\r\n    \"Sunday\",\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\",\r\n  ];\r\n  const day = new Date(parseInt(props.dateTime) * 1000);\r\n  const nameDay = days[day.getDay(day)];\r\n  const months = [\r\n    \"January\",\r\n    \"Febuary\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n  const month = months[day.getMonth(day)];\r\n  const date = day.getDate(day);\r\n  const icon = `http://openweathermap.org/img/wn/${props.icon}@2x.png`;\r\n  const description =\r\n    props.detailedDesc[0].toUpperCase() +\r\n    props.detailedDesc.slice(1, props.detailedDesc.length);\r\n  const maxTemp = Math.round(props.maxTemp) + \"°C\";\r\n  const minTemp = Math.round(props.minTemp) + \"°C\";\r\n  const windSpeed = Math.round(props.windSpeed * 10) / 10 + \"m/s\";\r\n  const windDirRot = String(\"rotate(\" + props.windDir + \"deg)\");\r\n\r\n  return (\r\n    <Grid item xs={11} sm={6} md={4} lg={3} xl={2}>\r\n      <Paper className={classes.paper}>\r\n        <Grid container>\r\n          <Grid\r\n            item\r\n            xs={6}\r\n            container\r\n            spacing={0}\r\n            direction=\"column\"\r\n            alignItems=\"flex-start\"\r\n          >\r\n            <Grid item xs>\r\n              <Typography variant=\"h5\" gutterBottom>\r\n                {nameDay}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Typography variant=\"body2\" gutterBottom>\r\n                {date + \" \" + month}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Typography variant=\"body1\" gutterBottom>\r\n                {description}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={6} container justify=\"center\">\r\n            <Grid item xs={8}>\r\n              <img\r\n                className=\"weather-icon\"\r\n                src={icon}\r\n                alt={\"Icon for \" + props.description}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container>\r\n          <Grid item xs={6} container direction=\"column\" alignItems=\"center\">\r\n            <Grid item xs>\r\n              <Typography variant=\"body1\" gutterBottom>\r\n                Min Temp\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Typography variant=\"body1\" gutterBottom>\r\n                {minTemp}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={6} container direction=\"column\" alignItems=\"center\">\r\n            <Grid item xs>\r\n              <Typography variant=\"body1\" gutterBottom>\r\n                Max Temp\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Typography variant=\"body1\" gutterBottom>\r\n                {maxTemp}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={12} container>\r\n          <Grid item xs={6} container direction=\"column\" alignItems=\"center\">\r\n            <Grid item xs>\r\n              <Typography variant=\"body1\" gutterBottom>\r\n                Wind Speed\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Typography variant=\"body1\" gutterBottom>\r\n                {windSpeed}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={6} container direction=\"column\" alignItems=\"center\">\r\n            <Grid item xs>\r\n              <Typography variant=\"body1\" gutterBottom>\r\n                Wind Direction\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Typography variant=\"caption\" gutterBottom>\r\n                N\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <NavigationIcon style={{ transform: windDirRot }} />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default NewCard;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport NewCard from \"./NewCard\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nfunction NewWeatherCard(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root} style={{ padding: 15 }}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n      {props.weatherData.slice(0, 7).map((day, i) => (\r\n          <NewCard\r\n            key={i}\r\n            dateTime={day.dt}\r\n            icon={day.weather[0].icon}\r\n            detailedDesc={day.weather[0].description}\r\n            maxTemp={day.temp.max}\r\n            minTemp={day.temp.min}\r\n            windSpeed={day.wind_speed}\r\n            windDir={day.wind_deg}\r\n          />\r\n        ))}\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NewWeatherCard;\r\n","import axios from \"axios\";\r\n\r\nexport class WeatherApiClient {\r\n  status(response) {\r\n    if (response.status >= 200 && response.status < 300) {\r\n      return Promise.resolve(response);\r\n    } else {\r\n      return Promise.reject(new Error(response.statusText));\r\n    }\r\n  }\r\n\r\n  getRequest(url) {\r\n    return axios\r\n      .get(url)\r\n      .then(this.status)\r\n      .catch(function (error) {\r\n        // handle error\r\n        console.error(error);\r\n        alert(error);\r\n      });\r\n  }\r\n\r\n  getWeather() {\r\n    let lat = \"53.866291\";\r\n    let lon = \"-1.458470\";\r\n    let apiKey = \"cf99e76fb15ace081d4cd3a0ee7b2104\";\r\n    let exclude = \"minutely,hourly,alerts\";\r\n    return this.getRequest(\r\n      `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=${exclude}&units=metric&appid=${apiKey}`\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport SevenDayCards from \"./SevenDayCards\";\n// import CssBaseline from \"@material-ui/core/CssBaseline\"; // Is this useful?\nimport \"./App.css\";\nimport \"fontsource-roboto\";\nimport { WeatherApiClient } from \"./WeatherApiClient\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      weather: [],\n      loading: \"\",\n      fetching: false, // Remove if I don't use this variable\n    };\n    this.weatherApiClient = new WeatherApiClient();\n  }\n\n  fetchWeather() {\n    this.setState({\n      loading: \"loading...\",\n      fetching: true,\n    });\n\n    this.weatherApiClient\n      .getWeather()\n      .then((response) => this.updateWeather(response.data.daily))\n      .finally(() => {\n        this.setState({\n          loading: \"\",\n          fetching: false,\n        });\n      });\n  }\n\n  updateWeather(response) {\n    this.setState({\n      weather: response,\n    });\n  }\n\n  componentDidMount() {\n    this.fetchWeather();\n  }\n\n  render() {\n    console.log(this.state.weather);\n    return (\n      <div className=\"App\">\n        <Grid container>\n          <Grid item xs={12}>\n            <Box textAlign=\"center\">\n              <Typography variant=\"h2\">7 Day Weather Forecast</Typography>\n            </Box>\n          </Grid>\n          <Grid item xs={12}>\n            <Box textAlign=\"center\">\n              <Typography variant=\"h5\" gutterBottom>\n                {this.state.loading}\n              </Typography>\n            </Box>\n          </Grid>\n        </Grid>\n        <SevenDayCards weatherData={this.state.weather} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}